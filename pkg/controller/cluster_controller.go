package controller

/*
Copyright 2024 The cap-infra-dns Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

/*
Copyright 2024 The external-dns-infoblox-webhook Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"
	"fmt"

	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/external-dns/endpoint"

	apierrors "k8s.io/apimachinery/pkg/api/errors"
	clusterv1 "sigs.k8s.io/cluster-api/api/v1beta1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

type ClusterReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// SetupWithManager sets up the controller with the Manager.
func (r *ClusterReconciler) SetupWithManager(ctx context.Context, mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&clusterv1.Cluster{}).
		Watches(
			&clusterv1.Machine{},
			handler.EnqueueRequestsFromMapFunc(r.MachineToEndpointMapFunc),
		).
		Watches(
			&clusterv1.Cluster{},
			handler.EnqueueRequestsFromMapFunc(r.ClusterToEndpointMapFunc),
		).
		Complete(r)
}

func (r *ClusterReconciler) Reconcile(ctx context.Context, req ctrl.Request) (res ctrl.Result, err error) {
	logger := log.FromContext(ctx)
	logger.Info("Reconcile cluster")

	ep, err := r.GenerateDNSEndpoint(ctx, req)
	if err != nil {
		logger.Error(err, "Failed to generate endpoint")
	}
	err = r.createOrUpdateEndpoint(ctx, ep)
	if err != nil {
		return ctrl.Result{}, err
	}

	return res, err
}

func (r *ClusterReconciler) createOrUpdateEndpoint(ctx context.Context, newEp *endpoint.DNSEndpoint) error {
	oldEp := &endpoint.DNSEndpoint{}
	epName := types.NamespacedName{
		Namespace: newEp.Namespace,
		Name:      newEp.Name,
	}
	err := r.Client.Get(ctx, epName, oldEp)
	if apierrors.IsNotFound(err) {
		err = r.Client.Create(ctx, newEp)
		if err != nil {
			return err
		}
		return nil
	}

	if !EqualDNSEndpoints(newEp, oldEp) {
		oldEp.Spec = newEp.Spec
		oldEp.Annotations = newEp.Annotations
		oldEp.Labels = newEp.Labels
		err = r.Client.Update(ctx, oldEp)
		if err != nil {
			fmt.Println(err)
			return err
		}
	}

	return nil
}
func (r *ClusterReconciler) GenerateDNSEndpoint(ctx context.Context, req ctrl.Request) (*endpoint.DNSEndpoint, error) {
	ep := &endpoint.DNSEndpoint{}
	cluster := &clusterv1.Cluster{}
	err := r.Client.Get(ctx, req.NamespacedName, cluster, &client.GetOptions{})
	ep.ObjectMeta = metav1.ObjectMeta{
		Name:        req.Name,
		Namespace:   req.Namespace,
		Labels:      cluster.Labels,
		Annotations: CopyWithoutLastAppliedConfiguration(cluster.Annotations),
	}
	if err != nil {
		return nil, err
	}
	endpoints := []*endpoint.Endpoint{}
	machines := &clusterv1.MachineList{}
	selectors := getSelectors(req.NamespacedName)
	err = r.List(ctx, machines, selectors...)
	if err != nil {
		return nil, err
	}
	ips := extractStatus(machines)
	record := &endpoint.Endpoint{
		DNSName:    cluster.Spec.ControlPlaneEndpoint.Host,
		RecordTTL:  endpoint.TTL(30),
		RecordType: "A",
		Targets:    ips,
	}
	endpoints = append(endpoints, record)
	ep.Spec = endpoint.DNSEndpointSpec{
		Endpoints: endpoints,
	}
	err = controllerutil.SetOwnerReference(cluster, ep, r.Scheme)
	return ep, err
}
func (r *ClusterReconciler) ClusterToEndpointMapFunc(ctx context.Context, o client.Object) []ctrl.Request {
	result := []ctrl.Request{}
	c, ok := o.(*clusterv1.Cluster)

	if !ok {
		panic(fmt.Sprintf("Expected a Cluster but got a %T", o))
	}
	epName := c.Spec.ControlPlaneEndpoint.Host
	if epName == "" {
		fmt.Println("ControlPlaneEndpoint.spec is not set")
		return nil
	}
	//get controller plane machines for cluster
	selectors := getSelectors(types.NamespacedName{
		Name:      c.Name,
		Namespace: c.Namespace,
	})

	machineList := &clusterv1.MachineList{}
	if err := r.Client.List(ctx, machineList, selectors...); err != nil {
		return nil
	}
	ips := extractStatus(machineList)
	fmt.Printf("IPs for cluster %s, %+v", c.Name, ips)
	return result
}

func getSelectors(n types.NamespacedName) []client.ListOption {
	x := []client.ListOption{
		client.InNamespace(n.Namespace),
		client.MatchingLabels{
			clusterv1.ClusterNameLabel:         n.Name,
			clusterv1.MachineControlPlaneLabel: "",
		},
	}
	return x

}
func extractStatus(l *clusterv1.MachineList) []string {
	targets := make([]string, 0)
	for _, m := range l.Items {
		if m.Status.Addresses != nil {
			a := getIPs(m.Status.Addresses)
			if a == "" {
				fmt.Printf("Machine %s/%s doesn't have IP yet", m.Namespace, m.Name)
				continue
			}
			targets = append(targets, a)
		}
	}
	return targets
}

func getIPs(al []clusterv1.MachineAddress) string {
	for _, a := range al {
		if a.Type == "ExternalIP" {
			return a.Address
		}
	}
	return ""
}
func (r ClusterReconciler) MachineToEndpointMapFunc(_ context.Context, o client.Object) []ctrl.Request {
	result := []ctrl.Request{}
	m, ok := o.(*clusterv1.Machine)
	ctx := context.TODO()

	if !ok {
		panic(fmt.Sprintf("Expected a Machine but got a %T", o))
	}

	if !metav1.HasLabel(m.ObjectMeta, clusterv1.MachineControlPlaneLabel) {
		return []ctrl.Request{}
	}

	epMeta := types.NamespacedName{
		Namespace: m.Namespace,
		Name:      m.Labels[clusterv1.ClusterNameLabel],
	}

	oldEp := &endpoint.DNSEndpoint{}
	err := r.Client.Get(ctx, epMeta, oldEp)
	if err != nil {
		fmt.Printf("Error %s\n", err.Error())
	}

	ip := ""
	for _, a := range m.Status.Addresses {
		if a.Type == clusterv1.MachineExternalIP {
			ip = a.Address
		}
	}

	if ip == "" {
		return result
	}
	delete := false
	if m.ObjectMeta.DeletionTimestamp != nil {
		delete = true
	}

	oldTargets := oldEp.Spec.Endpoints[0].Targets
	oldEp.Spec.Endpoints[0].Targets = updateTargets(oldTargets, ip, delete)
	err = r.Client.Update(ctx, oldEp)
	if err != nil {
		fmt.Printf("Failed to update Endpoint: %s\n", err.Error())
	}
	return result
}

func updateTargets(t []string, ip string, delete bool) []string {
	if targetContains(t, ip) {
		if delete {
			return targetRemove(t, ip)
		}
		return t
	}
	return append(t, ip)
}
