package controller

/*
Copyright 2024 The cap-infra-dns Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

/*
Copyright 2024 The external-dns-infoblox-webhook Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"sigs.k8s.io/external-dns/endpoint"
)

func CopyWithoutLastAppliedConfiguration(annotations map[string]string) map[string]string {
	const key = "kubectl.kubernetes.io/last-applied-configuration"
	newAnnotations := make(map[string]string)
	for k, v := range annotations {
		if k != key {
			newAnnotations[k] = v
		}
	}
	return newAnnotations
}

// EqualMaps compares two maps. It ignores nil and empty map difference
func EqualMaps(a, b map[string]string) bool {
	if len(a) != len(b) {
		return false
	}
	for k := range a {
		if b[k] != a[k] {
			return false
		}
	}
	return true
}

// EqualDNSEndpoints compares labels, annotations and spec
func EqualDNSEndpoints(newEp, oldEp *endpoint.DNSEndpoint) bool {
	if newEp == nil && oldEp == nil {
		return true
	}
	if newEp == nil || oldEp == nil {
		return false
	}

	if !EqualMaps(newEp.Annotations, oldEp.Annotations) {
		return false
	}

	if !EqualMaps(newEp.Labels, oldEp.Labels) {
		return false
	}

	if len(newEp.Spec.Endpoints) != 1 {
		return false
	}

	if len(oldEp.Spec.Endpoints) != 1 {
		return false
	}

	newE := newEp.Spec.Endpoints[0]
	oldE := oldEp.Spec.Endpoints[0]

	return newE.DNSName == oldE.DNSName &&
		newE.RecordType == oldE.RecordType &&
		newE.RecordTTL == oldE.RecordTTL &&
		newE.Targets.Same(oldE.Targets)
}

func targetContains(slice []string, value string) bool {
	for _, v := range slice {
		if v == value {
			return true
		}
	}
	return false
}

func targetRemove(slice []string, value string) []string {
	for i, v := range slice {
		if v == value {
			// Remove the element at index i
			return append(slice[:i], slice[i+1:]...)
		}
	}
	return slice
}
